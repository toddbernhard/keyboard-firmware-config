#!/usr/bin/env python3

import argparse
import logging
import os
import re
import shutil
import subprocess
from typing import List

_supported_keyboards = None

logger = logging.getLogger(__name__)


def get_supported_keyboards() -> List[str]:
    global _supported_keyboards
    if not _supported_keyboards:
        # seems a bit hacky but works for now
        keyboards = [d for d in os.listdir('.') if os.path.isdir(d)]
        keyboards.remove('qmk_userspace')
        _supported_keyboards = keyboards
    return _supported_keyboards


def deal_with_cli_arguments():
    description = '\n  . '.join(
        ['Supports building custom QMK firmware for the following keyboards:']
        + get_supported_keyboards()
    )

    parser = argparse.ArgumentParser(
        prog='build-qmk-keyboard',
        usage='%(prog)s [options] keyboard [keymap]',
        description=description,
        formatter_class=argparse.RawTextHelpFormatter
    )

    def environ_or_required(key):
        return (
            {'default': os.environ.get(key)} if os.environ.get(key)
            else {'required': True}
        )

    parser.add_argument('keyboard', choices=get_supported_keyboards(), metavar='keyboard',
                        help='one of the supported keyboards')
    parser.add_argument('keymap', nargs='?', default=os.environ.get('QMK_KEYMAP'),
                        help="what to name the keymap for this build. defaults to git username. can be set via"
                             " environment: QMK_KEYMAP.")
    parser.add_argument('--userspace')
    parser.add_argument('--qmk-repo', **environ_or_required('QMK_REPO'),
                        help='path to a checkout of the qmk_firmware repo. required, or can be set via environment:'
                             ' QMK_REPO.')
    parser.add_argument('--runtime', metavar='docker|podman', help="containerization runtime. detected if not set.")
    parser.add_argument('--qmk-keyboard-path')
    parser.add_argument('--alt-get-keyboards', type=bool, metavar='true|false',
                        default=os.environ.get('ALT_GET_KEYBOARDS', True),
                        help='defaults to: true. pass-through for environment: ALT_GET_KEYBOARDS.')
    parser.add_argument('--skip-git', default=os.environ.get('SKIP_GIT'),
                        help='pass-through for environment: SKIP_GIT.')
    parser.add_argument('--makeflags', default=os.environ.get('MAKEFLAGS'),
                        help='pass-through for environment: MAKEFLAGS.')

    arguments = vars(parser.parse_args())


    # TODO this needs testing
    if not arguments['keymap']:
        output = subprocess.check_output(['git', 'config', '--get', 'user.name'])
        arguments['keymap'] = output.trim().decode('ascii')

    p = re.compile(r'[\w-]+')
    if not p.fullmatch(arguments['keymap']):
        exit(8)
    # TODO above needs fixing


    if not arguments['runtime']:
        if 'RUNTIME' in os.environ:
            arguments['runtime'] = os.environ['RUNTIME']
        elif shutil.which('docker'):
            arguments['runtime'] = 'docker'
        elif shutil.which('podman'):
            arguments['runtime'] = 'podman'

    if arguments['runtime'] not in ('docker', 'podman'):
        logger.error(
              'Error: no compatible container runtime found. '
              'Either podman or docker are required.'
              )
        exit(2)

    return arguments


def get_docker_command(args) -> str:
    board = args['keyboard']
    board_path = args['qmk_keyboard_path'] if args['qmk_keyboard_path'] else board
    kmap = args['keymap']

    qmk_mount = f'{os.path.abspath(args["qmk_repo"])}:/qmk_firmware'

    userspace_mount = ''
    if args['userspace']:
        userspace_mount = f' -v {os.getcwd()}/qmk_userspace:/qmk_firmware/users/{kmap}'

    keyboard_mount = f'{os.getcwd()}/{board}/src:' \
                     f'/qmk_firmware/keyboards/{board_path}/keymaps/{kmap}'

    environment = f' -e ALT_GET_KEYBOARDS={args["alt_get_keyboards"]}' \
                  f' -e SKIP_GIT={args["skip_git"]}' if args['skip_git'] else '' \
                  f' -e MAKEFLAGS={args["makeflags"]}' if args['makeflags'] else ''

    cmd = args['runtime'] + ' run --rm -it' \
        f' -w /qmk_firmware' \
        f' -v {qmk_mount}' \
        f'{userspace_mount}' \
        f' -v {keyboard_mount}' \
        f' {environment}' \
        f' qmkfm/qmk_cli' \
        f' make {board_path}:{kmap}'

    return cmd


if __name__ == '__main__':
    args = deal_with_cli_arguments()
    logger.debug(f'Parsed arguments: {args}')

    command = get_docker_command(args)

    logger.warning(f'Running:\n{command}\n')

    os.system(command)
